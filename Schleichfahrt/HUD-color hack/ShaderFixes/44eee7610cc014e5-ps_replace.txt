// ---- Created with 3Dmigoto v0.6.164 on Sat Nov  4 01:54:35 2023
Texture2D<uint4> t1 : register(t1);

Texture2D<uint4> t0 : register(t0);

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xy = (int2)v1.xy;
  r0.zw = float2(0,0);
  r1.xyzw = t0.Load(r0.xyw).xyzw;
  r0.xyzw = t1.Load(r0.xyz).xyzw;
  r0.x = cmp((int)r0.x == (int)r1.x);
  if (r0.x != 0) discard;
  r0.xy = cmp(asint(cb0[10].zz) == int2(1,2));
  r0.y = (int)r0.y | (int)r0.x;
  r1.yzw = cmp(asint(cb0[1].xxx) == int3(2,3,1));
  r0.zw = (int2)r1.zz | (int2)r1.yw;
  r1.y = (uint)r1.x >> 1;
  r1.z = (uint)r1.x << 15;
  r1.z = (int)r1.z & 0x00008000;
  r1.y = (int)r1.z | (int)r1.y;
  r0.z = r0.z ? r1.y : r1.x;
  r0.y = r0.y ? r0.z : r1.x;
  r0.z = cmp(asuint(cb0[10].z) < 1);
  r1.x = (uint)r0.y >> 8;
  r1.y = (uint)r0.y >> 3;
  r1.z = (uint)r0.y >> 13;
  r1.w = (uint)r0.y >> 9;
  r2.x = (uint)r0.y << 3;
  r2.y = (uint)r0.y << 16;
  r3.z = (int)r2.x & 248;
  r3.w = asint(cb0[1].z) & 255;
  r1.xyzw = (int4)r1.zwxy & int4(7,3,248,252);
  r4.xz = (uint2)r0.yy >> 2;
  r4.y = (uint)r0.y >> 7;
  r4.w = (uint)r0.y >> 12;
  r5.xyzw = (int4)r4.xyzw & int4(7,248,248,7);
  r3.xy = r1.zw;
  r1.z = r5.x;
  r1.w = 0;
  r1.xyzw = (int4)r1.xyzw + (int4)r3.xyzw;
  r4.y = (int)r4.y & 7;
  r3.xy = r5.yz;
  r4.xz = r5.wx;
  r4.w = 0;
  r3.xyzw = (int4)r3.xyzw + (int4)r4.xyzw;
  r0.y = (uint)r2.y >> 16;
  r2.x = (uint)r0.y >> 12;
  r2.y = (uint)r0.y >> 2;
  r2.zw = (uint2)r0.yy >> 7;
  r4.x = (uint)r0.y << 3;
  r4.z = (int)r4.x & 248;
  r0.y = (uint)r0.y >> 31;
  r4.w = (int)r0.y & 255;
  r5.xyzw = (int4)r2.xyzw & int4(7,248,248,7);
  r2.z = (int)r2.y & 7;
  r4.xy = r5.zy;
  r2.xy = r5.xw;
  r2.w = 0;
  r2.xyzw = (int4)r2.xyzw + (int4)r4.xyzw;
  r2.xyzw = r0.xxxx ? r3.xyzw : r2.xyzw;
  r1.xyzw = r0.zzzz ? r1.xyzw : r2.xyzw;
  r0.xy = r0.ww ? r1.zx : r1.xz;
  r0.xz = (uint2)r0.xy;
  r0.yw = (uint2)r1.yw;
  
  
  if(eye<=0 & (r0.x>= 100 | r0.y <125 | r0.z >100)){
	discard;
  }
  
  o0.xyzw = float4(0.00392156886,0.00392156886,0.00392156886,0.00392156886) * r0.xyzw;
  

  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v0.6.164 on Sat Nov  4 01:54:35 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer CB0[11], immediateIndexed
dcl_resource_texture2d (uint,uint,uint,uint) t0
dcl_resource_texture2d (uint,uint,uint,uint) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
ftoi r0.xy, v1.xyxx
mov r0.zw, l(0,0,0,0)
ld r1.xyzw, r0.xyww, t0.xyzw
ld r0.xyzw, r0.xyzw, t1.xyzw
ieq r0.x, r0.x, r1.x
discard_nz r0.x
ieq r0.xy, cb0[10].zzzz, l(1, 2, 0, 0)
or r0.y, r0.y, r0.x
ieq r1.yzw, cb0[1].xxxx, l(0, 2, 3, 1)
or r0.zw, r1.zzzz, r1.yyyw
ushr r1.y, r1.x, l(1)
ishl r1.z, r1.x, l(15)
and r1.z, r1.z, l(0x00008000)
or r1.y, r1.z, r1.y
movc r0.z, r0.z, r1.y, r1.x
movc r0.y, r0.y, r0.z, r1.x
ult r0.z, cb0[10].z, l(1)
ushr r1.x, r0.y, l(8)
ushr r1.y, r0.y, l(3)
ushr r1.z, r0.y, l(13)
ushr r1.w, r0.y, l(9)
ishl r2.x, r0.y, l(3)
ishl r2.y, r0.y, l(16)
and r3.z, r2.x, l(248)
and r3.w, cb0[1].z, l(255)
and r1.xyzw, r1.zwxy, l(7, 3, 248, 252)
ushr r4.xz, r0.yyyy, l(2)
ushr r4.y, r0.y, l(7)
ushr r4.w, r0.y, l(12)
and r5.xyzw, r4.xyzw, l(7, 248, 248, 7)
mov r3.xy, r1.zwzz
mov r1.z, r5.x
mov r1.w, l(0)
iadd r1.xyzw, r1.xyzw, r3.xyzw
and r4.y, r4.y, l(7)
mov r3.xy, r5.yzyy
mov r4.xz, r5.wwxw
mov r4.w, l(0)
iadd r3.xyzw, r3.xyzw, r4.xyzw
ishr r0.y, r2.y, l(16)
ushr r2.x, r0.y, l(12)
ushr r2.y, r0.y, l(2)
ushr r2.zw, r0.yyyy, l(7)
ishl r4.x, r0.y, l(3)
and r4.z, r4.x, l(248)
ishr r0.y, r0.y, l(31)
and r4.w, r0.y, l(255)
and r5.xyzw, r2.xyzw, l(7, 248, 248, 7)
and r2.z, r2.y, l(7)
mov r4.xy, r5.zyzz
mov r2.xy, r5.xwxx
mov r2.w, l(0)
iadd r2.xyzw, r2.xyzw, r4.xyzw
movc r2.xyzw, r0.xxxx, r3.xyzw, r2.xyzw
movc r1.xyzw, r0.zzzz, r1.xyzw, r2.xyzw
movc r0.xy, r0.wwww, r1.zxzz, r1.xzxx
utof r0.xz, r0.xxyx
utof r0.yw, r1.yyyw
mul o0.xyzw, r0.xyzw, l(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
