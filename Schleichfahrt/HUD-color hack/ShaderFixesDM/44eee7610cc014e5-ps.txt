// AUTOMATICALLY CONVERTED FROM SHADER FIXES 
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//   using 3Dmigoto v0.6.164 on Sat Nov  4 02:03:03 2023
//
//
// Buffer Definitions:
//
// cbuffer cb0
// {
//
//   float4 cb0[11];                    // Offset:    0 Size:   176
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// t0                                texture   uint4          2d    0        1
// t1                                texture   uint4          2d    1        1
// StereoParams                      texture  float4          2d  125        1
// cb0                               cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer CB0[11], immediateIndexed
dcl_resource_texture2d (uint,uint,uint,uint) t0
dcl_resource_texture2d (uint,uint,uint,uint) t1
dcl_resource_buffer (float,float,float,float) t125
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
round_z r0.xy, v1.xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ld r1.xyzw, r0.xyww, t0.xyzw
utof r1.y, r1.x
ld r0.xyzw, r0.xyzw, t1.xyzw
utof r0.x, r0.x
ftoi r0.x, r0.x
ftoi r0.y, r1.y
ieq r0.x, r0.y, r0.x
discard_nz r0.x
ld r0.xyzw, l(0, 0, 0, 0), t125.xyzw
movc r0.z, r0.z, l(-1.000000), l(1.000000)
ieq r0.xy, cb0[10].zzzz, l(1, 2, 0, 0)
or r0.y, r0.x, r0.y
ieq r2.xyz, cb0[1].xxxx, l(2, 3, 1, 0)
or r1.zw, r2.xxxz, r2.yyyy
itof r1.zw, r1.zzzw
ushr r0.w, r1.x, l(1)
utof r0.w, r0.w
ishl r1.x, r1.x, l(15)
utof r1.x, r1.x
ftoi r1.x, r1.x
and r1.x, r1.x, l(0x00008000)
utof r1.x, r1.x
ftoi r1.x, r1.x
ftoi r0.w, r0.w
or r0.w, r0.w, r1.x
itof r0.yw, r0.yyyw
ne r1.xz, l(0.000000, 0.000000, 0.000000, 0.000000), r1.zzwz
movc r0.w, r1.x, r0.w, r1.y
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
movc r0.y, r0.y, r0.w, r1.y
ult r0.w, cb0[10].z, l(1)
ftou r0.y, r0.y
ushr r2.x, r0.y, l(13)
ushr r2.y, r0.y, l(9)
ushr r2.z, r0.y, l(8)
ushr r2.w, r0.y, l(3)
utof r2.xyzw, r2.xyzw
ishl r1.x, r0.y, l(3)
utof r1.x, r1.x
ftoi r1.x, r1.x
and r3.z, r1.x, l(248)
and r3.w, cb0[1].z, l(255)
ftoi r2.xyzw, r2.xyzw
and r2.xyzw, r2.xyzw, l(7, 3, 248, 252)
ushr r4.xz, r0.yyyy, l(2)
ushr r4.y, r0.y, l(7)
ushr r4.w, r0.y, l(12)
utof r4.xyzw, r4.xyzw
ftoi r4.xyzw, r4.xyzw
and r5.xyzw, r4.xyzw, l(7, 248, 248, 7)
mov r6.xy, r2.xyxx
mov r6.z, r5.x
mov r6.w, l(0)
mov r3.xy, r2.zwzz
iadd r2.xyzw, r3.xyzw, r6.xyzw
itof r2.xyzw, r2.xyzw
and r4.y, r4.y, l(7)
mov r3.xy, r5.yzyy
mov r4.xz, r5.wwxw
mov r4.w, l(0)
iadd r3.xyzw, r3.xyzw, r4.xyzw
itof r3.xyzw, r3.xyzw
and r0.y, r0.y, l(0x0000ffff)
ushr r4.x, r0.y, l(12)
ushr r4.y, r0.y, l(2)
ushr r4.zw, r0.yyyy, l(7)
utof r4.xyzw, r4.xyzw
ishl r0.y, r0.y, l(3)
utof r0.y, r0.y
ftoi r0.y, r0.y
and r5.z, r0.y, l(248)
ftoi r4.xyzw, r4.xyzw
and r6.xyzw, r4.xyzw, l(7, 248, 248, 7)
and r4.z, r4.y, l(7)
mov r4.xy, r6.xwxx
mov r4.w, l(0)
mov r5.xy, r6.zyzz
mov r5.w, l(0)
iadd r4.xyzw, r4.xyzw, r5.xyzw
itof r4.xyzw, r4.xyzw
movc r3.xyzw, r0.xxxx, r3.xyzw, r4.xyzw
movc r2.xyzw, r0.wwww, r2.xyzw, r3.xyzw
movc r0.xy, r1.zzzz, r2.zxzz, r2.xzxx
ftou r0.xy, r0.xyxx
utof r1.xz, r0.xxyx
ftou r0.xy, r2.ywyy
utof r1.yw, r0.xxxy
ge r0.x, l(0.000000), r0.z
ge r0.y, r1.x, l(100.000000)
lt r0.z, r1.y, l(125.000000)
or r0.y, r0.z, r0.y
lt r0.z, l(100.000000), r1.z
or r0.y, r0.z, r0.y
and r0.x, r0.x, r0.y
and r0.x, r0.x, l(1)
discard_nz r0.x
mul o0.xyzw, r1.xyzw, l(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886)
ret
// Approximately 100 instruction slots used

///////////////////////////////// HLSL Code /////////////////////////////////
// // ---- Created with 3Dmigoto v0.6.164 on Sat Nov  4 02:03:03 2023
//
// cbuffer cb0 : register(b0)
// {
//   float4 cb0[11] : packoffset(c0);
// }
//
// Texture2D<uint4> t0 : register(t0);
// Texture2D<uint4> t1 : register(t1);
//
//
// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Buffer<float4> StereoParams : register(t125);
//
//
// void main(
//   float4 v0 : SV_POSITION0,
//   float2 v1 : TEXCOORD0,
//   out float4 o0 : SV_TARGET0)
// {
//   float4 r0,r1,r2,r3,r4,r5,r6;
//   uint4 bitmask, uiDest;
//   float4 fDest;
//
//   r0.xy = trunc(v1.xy);
//   r0.xy = (int2)r0.xy;
//   r0.zw = float2(0,0);
//   r1.xyzw = t0.Load(r0.xyw).xyzw;
//   r1.y = (uint)r1.x;
//   r0.xyzw = t1.Load(r0.xyz).xyzw;
//   r0.x = (uint)r0.x;
//   r0.x = (int)r0.x;
//   r0.y = (int)r1.y;
//   r0.x = cmp((int)r0.y == (int)r0.x);
//   if (r0.x != 0) discard;
//   r0.xyzw = StereoParams.Load(float4(0,0,0,0)).xyzw;
//   r0.z = r0.z ? -1 : 1;
//   r0.xy = cmp(asint(cb0[10].zz) == int2(1,2));
//   r0.y = (int)r0.x | (int)r0.y;
//   r2.xyz = cmp(asint(cb0[1].xxx) == int3(2,3,1));
//   r1.zw = (int2)r2.xz | (int2)r2.yy;
//   r1.zw = (int2)r1.zw;
//   r0.w = (uint)r1.x >> 1;
//   r0.w = (uint)r0.w;
//   r1.x = (uint)r1.x << 15;
//   r1.x = (uint)r1.x;
//   r1.x = (int)r1.x;
//   r1.x = (int)r1.x & 0x00008000;
//   r1.x = (uint)r1.x;
//   r1.x = (int)r1.x;
//   r0.w = (int)r0.w;
//   r0.w = (int)r0.w | (int)r1.x;
//   r0.yw = (int2)r0.yw;
//   r1.xz = cmp(float2(0,0) != r1.zw);
//   r0.w = r1.x ? r0.w : r1.y;
//   r0.y = cmp(0 != r0.y);
//   r0.y = r0.y ? r0.w : r1.y;
//   r0.w = cmp(asuint(cb0[10].z) < 1);
//   r0.y = (uint)r0.y;
//   r2.x = (uint)r0.y >> 13;
//   r2.y = (uint)r0.y >> 9;
//   r2.z = (uint)r0.y >> 8;
//   r2.w = (uint)r0.y >> 3;
//   r2.xyzw = (uint4)r2.xyzw;
//   r1.x = (uint)r0.y << 3;
//   r1.x = (uint)r1.x;
//   r1.x = (int)r1.x;
//   r3.z = (int)r1.x & 248;
//   r3.w = asint(cb0[1].z) & 255;
//   r2.xyzw = (int4)r2.xyzw;
//   r2.xyzw = (int4)r2.xyzw & int4(7,3,248,252);
//   r4.xz = (uint2)r0.yy >> 2;
//   r4.y = (uint)r0.y >> 7;
//   r4.w = (uint)r0.y >> 12;
//   r4.xyzw = (uint4)r4.xyzw;
//   r4.xyzw = (int4)r4.xyzw;
//   r5.xyzw = (int4)r4.xyzw & int4(7,248,248,7);
//   r6.xy = r2.xy;
//   r6.z = r5.x;
//   r6.w = 0;
//   r3.xy = r2.zw;
//   r2.xyzw = (int4)r3.xyzw + (int4)r6.xyzw;
//   r2.xyzw = (int4)r2.xyzw;
//   r4.y = (int)r4.y & 7;
//   r3.xy = r5.yz;
//   r4.xz = r5.wx;
//   r4.w = 0;
//   r3.xyzw = (int4)r3.xyzw + (int4)r4.xyzw;
//   r3.xyzw = (int4)r3.xyzw;
//   r0.y = (int)r0.y & 0x0000ffff;
//   r4.x = (uint)r0.y >> 12;
//   r4.y = (uint)r0.y >> 2;
//   r4.zw = (uint2)r0.yy >> 7;
//   r4.xyzw = (uint4)r4.xyzw;
//   r0.y = (uint)r0.y << 3;
//   r0.y = (uint)r0.y;
//   r0.y = (int)r0.y;
//   r5.z = (int)r0.y & 248;
//   r4.xyzw = (int4)r4.xyzw;
//   r6.xyzw = (int4)r4.xyzw & int4(7,248,248,7);
//   r4.z = (int)r4.y & 7;
//   r4.xy = r6.xw;
//   r4.w = 0;
//   r5.xy = r6.zy;
//   r5.w = 0;
//   r4.xyzw = (int4)r4.xyzw + (int4)r5.xyzw;
//   r4.xyzw = (int4)r4.xyzw;
//   r3.xyzw = r0.xxxx ? r3.xyzw : r4.xyzw;
//   r2.xyzw = r0.wwww ? r2.xyzw : r3.xyzw;
//   r0.xy = r1.zz ? r2.zx : r2.xz;
//   r0.xy = (uint2)r0.xy;
//   r1.xz = (uint2)r0.xy;
//   r0.xy = (uint2)r2.yw;
//   r1.yw = (uint2)r0.xy;
//   r0.x = cmp(0 >= r0.z);
//   r0.y = cmp(r1.x >= 100);
//   r0.z = cmp(r1.y < 125);
//   r0.y = (int)r0.z | (int)r0.y;
//   r0.z = cmp(100 < r1.z);
//   r0.y = (int)r0.z | (int)r0.y;
//   r0.x = r0.x ? r0.y : 0;
//   r0.x = r0.x ? 0.000000 : 0;
//   if (r0.x != 0) discard;
//   o0.xyzw = float4(0.00392156886,0.00392156886,0.00392156886,0.00392156886) * r1.xyzw;
//   return;
// }
/////////////////////////////////////////////////////////////////////////////
